//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FluentAsm/antlr4/Fluent6502.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace FluentAsm.Assembly.ASM_6502.gen;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Fluent6502 : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		A=1, X=2, Y=3, ADC=4, AND=5, ASL=6, BCC=7, BCS=8, BEQ=9, BIT=10, BMI=11, 
		BNE=12, BPL=13, BRA=14, BRK=15, BVC=16, BVS=17, CLC=18, CLD=19, CLI=20, 
		CLV=21, CMP=22, CPX=23, CPY=24, DEC=25, DEX=26, DEY=27, EOR=28, INC=29, 
		INX=30, INY=31, JMP=32, JSR=33, LDA=34, LDY=35, LDX=36, LSR=37, NOP=38, 
		ORA=39, PHA=40, PHP=41, PLA=42, PLP=43, ROL=44, ROR=45, RTI=46, RTS=47, 
		SBC=48, SEC=49, SED=50, SEI=51, STA=52, STX=53, STY=54, TAX=55, TAY=56, 
		TSX=57, TXA=58, TXS=59, TYA=60, POUND=61, COLON=62, COMMA=63, LPAREN=64, 
		RPAREN=65, PLUS=66, MINUS=67, LT=68, GT=69, CARET=70, TILDE=71, EXCLM=72, 
		STAR=73, SLASH=74, AMP=75, PIPE=76, LSHFT=77, RSHFT=78, AT=79, WORD=80, 
		ALIGN=81, ASCII=82, ASSERT=83, BANK=84, BANKBYTES=85, BYTES=86, CHARMAP=87, 
		DBYTE=88, DWORD=89, HIBYTES=90, LOBYTES=91, DEFINE=92, IF=93, IFDEF=94, 
		ELIF=95, ELSE=96, ENDIF=97, DefSYMBOL=98, DefLPAREN=99, DefRPAREN=100, 
		DefCOMMA=101, DefTEXT=102, DefEOL=103, DirTEXT=104, DirEOL=105, DirWS=106, 
		STRING=107, CHAR=108, SYMBOL=109, INT=110, HEX=111, BINARY=112, MULTI_COMMENT=113, 
		COMMENT=114, WS=115;
	public const int
		RULE_module = 0, RULE_line = 1, RULE_instruction = 2, RULE_comment = 3, 
		RULE_label_def = 4, RULE_expr = 5, RULE_number = 6, RULE_pc = 7, RULE_char = 8, 
		RULE_label = 9, RULE_directive = 10, RULE_dir_word = 11, RULE_dir_align = 12, 
		RULE_dir_ascii = 13, RULE_dir_assert = 14, RULE_dir_bank = 15, RULE_dir_bytes = 16, 
		RULE_dir_bankbyt = 17, RULE_op_unary = 18, RULE_op_binary = 19, RULE_op_goto = 20, 
		RULE_operation = 21, RULE_op_imp = 22, RULE_op_acc = 23, RULE_op_imm = 24, 
		RULE_op_rel = 25, RULE_op_zab = 26, RULE_op_zax = 27, RULE_op_zay = 28, 
		RULE_op_ind = 29, RULE_op_inx = 30, RULE_op_iny = 31, RULE_opcode_implied = 32, 
		RULE_opcode_accumlator = 33, RULE_opcode_immediate = 34, RULE_opcode_relative = 35, 
		RULE_opcode_zp_abs = 36, RULE_opcode_zp_abs_x = 37, RULE_opcode_zp_abs_y = 38, 
		RULE_opcode_indirect = 39, RULE_opcode_indirect_x = 40, RULE_opcode_indirect_y = 41;
	public static readonly string[] ruleNames = {
		"module", "line", "instruction", "comment", "label_def", "expr", "number", 
		"pc", "char", "label", "directive", "dir_word", "dir_align", "dir_ascii", 
		"dir_assert", "dir_bank", "dir_bytes", "dir_bankbyt", "op_unary", "op_binary", 
		"op_goto", "operation", "op_imp", "op_acc", "op_imm", "op_rel", "op_zab", 
		"op_zax", "op_zay", "op_ind", "op_inx", "op_iny", "opcode_implied", "opcode_accumlator", 
		"opcode_immediate", "opcode_relative", "opcode_zp_abs", "opcode_zp_abs_x", 
		"opcode_zp_abs_y", "opcode_indirect", "opcode_indirect_x", "opcode_indirect_y"
	};

	private static readonly string[] _LiteralNames = {
		null, "'a'", "'x'", "'y'", "'adc'", "'and'", "'asl'", "'bcc'", "'bcs'", 
		"'beq'", "'bit'", "'bmi'", "'bne'", "'bpl'", "'bra'", "'brk'", "'bvc'", 
		"'bvs'", "'clc'", "'cld'", "'cli'", "'clv'", "'cmp'", "'cpx'", "'cpy'", 
		"'dec'", "'dex'", "'dey'", "'eor'", "'inc'", "'inx'", "'iny'", "'jmp'", 
		"'jsr'", "'lda'", "'ldy'", "'ldx'", "'lsr'", "'nop'", "'ora'", "'pha'", 
		"'php'", "'pla'", "'plp'", "'rol'", "'ror'", "'rti'", "'rts'", "'sbc'", 
		"'sec'", "'sed'", "'sei'", "'sta'", "'stx'", "'sty'", "'tax'", "'tay'", 
		"'tsx'", "'txa'", "'txs'", "'tya'", "'#'", "':'", null, null, null, "'+'", 
		"'-'", "'<'", "'>'", "'^'", "'~'", "'!'", "'*'", "'/'", "'&'", "'|'", 
		"'<<'", "'>>'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "A", "X", "Y", "ADC", "AND", "ASL", "BCC", "BCS", "BEQ", "BIT", 
		"BMI", "BNE", "BPL", "BRA", "BRK", "BVC", "BVS", "CLC", "CLD", "CLI", 
		"CLV", "CMP", "CPX", "CPY", "DEC", "DEX", "DEY", "EOR", "INC", "INX", 
		"INY", "JMP", "JSR", "LDA", "LDY", "LDX", "LSR", "NOP", "ORA", "PHA", 
		"PHP", "PLA", "PLP", "ROL", "ROR", "RTI", "RTS", "SBC", "SEC", "SED", 
		"SEI", "STA", "STX", "STY", "TAX", "TAY", "TSX", "TXA", "TXS", "TYA", 
		"POUND", "COLON", "COMMA", "LPAREN", "RPAREN", "PLUS", "MINUS", "LT", 
		"GT", "CARET", "TILDE", "EXCLM", "STAR", "SLASH", "AMP", "PIPE", "LSHFT", 
		"RSHFT", "AT", "WORD", "ALIGN", "ASCII", "ASSERT", "BANK", "BANKBYTES", 
		"BYTES", "CHARMAP", "DBYTE", "DWORD", "HIBYTES", "LOBYTES", "DEFINE", 
		"IF", "IFDEF", "ELIF", "ELSE", "ENDIF", "DefSYMBOL", "DefLPAREN", "DefRPAREN", 
		"DefCOMMA", "DefTEXT", "DefEOL", "DirTEXT", "DirEOL", "DirWS", "STRING", 
		"CHAR", "SYMBOL", "INT", "HEX", "BINARY", "MULTI_COMMENT", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fluent6502.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Fluent6502() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Fluent6502(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Fluent6502(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Fluent6502.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 84;
				line();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009213677552L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 431008560177155L) != 0) );
			State = 89;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				comment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				instruction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				directive();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				label_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8796093030403L) != 0)) {
				{
				State = 97;
				label_def();
				}
			}

			State = 100;
			operation();
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 101;
				comment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(Fluent6502.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_COMMENT() { return GetToken(Fluent6502.MULTI_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 6, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTI_COMMENT || _la==COMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(Fluent6502.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fluent6502.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Fluent6502.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_gotoContext op_goto() {
			return GetRuleContext<Op_gotoContext>(0);
		}
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_label_def);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 106;
					Match(AT);
					}
				}

				State = 109;
				Match(SYMBOL);
				State = 110;
				Match(COLON);
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				op_goto();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PcContext pc() {
			return GetRuleContext<PcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_unaryContext op_unary() {
			return GetRuleContext<Op_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fluent6502.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fluent6502.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_binaryContext op_binary() {
			return GetRuleContext<Op_binaryContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 115;
				number();
				}
				break;
			case 2:
				{
				State = 116;
				pc();
				}
				break;
			case 3:
				{
				State = 117;
				@char();
				}
				break;
			case 4:
				{
				State = 118;
				label();
				}
				break;
			case 5:
				{
				State = 119;
				op_unary();
				State = 120;
				expr(3);
				}
				break;
			case 6:
				{
				State = 122;
				Match(LPAREN);
				State = 123;
				expr(0);
				State = 124;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 128;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 129;
					op_binary();
					State = 130;
					expr(3);
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(Fluent6502.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(Fluent6502.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(Fluent6502.BINARY, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fluent6502.STAR, 0); }
		public PcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcContext pc() {
		PcContext _localctx = new PcContext(Context, State);
		EnterRule(_localctx, 14, RULE_pc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(Fluent6502.CHAR, 0); }
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 16, RULE_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(Fluent6502.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Fluent6502.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_gotoContext op_goto() {
			return GetRuleContext<Op_gotoContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 18, RULE_label);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 143;
					Match(AT);
					}
				}

				State = 146;
				Match(SYMBOL);
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				op_goto();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dir_wordContext dir_word() {
			return GetRuleContext<Dir_wordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_alignContext dir_align() {
			return GetRuleContext<Dir_alignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_asciiContext dir_ascii() {
			return GetRuleContext<Dir_asciiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_assertContext dir_assert() {
			return GetRuleContext<Dir_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_bankContext dir_bank() {
			return GetRuleContext<Dir_bankContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_bytesContext dir_bytes() {
			return GetRuleContext<Dir_bytesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dir_bankbytContext dir_bankbyt() {
			return GetRuleContext<Dir_bankbytContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 20, RULE_directive);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				dir_word();
				}
				break;
			case ALIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				dir_align();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				dir_ascii();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153;
				dir_assert();
				}
				break;
			case BANK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				dir_bank();
				}
				break;
			case BYTES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 155;
				dir_bytes();
				}
				break;
			case BANKBYTES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 156;
				dir_bankbyt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_wordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Fluent6502.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fluent6502.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fluent6502.COMMA, i);
		}
		public Dir_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_word(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_wordContext dir_word() {
		Dir_wordContext _localctx = new Dir_wordContext(Context, State);
		EnterRule(_localctx, 22, RULE_dir_word);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(WORD);
			State = 160;
			expr(0);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 161;
				Match(COMMA);
				State = 162;
				expr(0);
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_alignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGN() { return GetToken(Fluent6502.ALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Dir_alignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_align; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_align(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_alignContext dir_align() {
		Dir_alignContext _localctx = new Dir_alignContext(Context, State);
		EnterRule(_localctx, 24, RULE_dir_align);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(ALIGN);
			State = 169;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_asciiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(Fluent6502.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Fluent6502.STRING, 0); }
		public Dir_asciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_ascii; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_ascii(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_asciiContext dir_ascii() {
		Dir_asciiContext _localctx = new Dir_asciiContext(Context, State);
		EnterRule(_localctx, 26, RULE_dir_ascii);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(ASCII);
			State = 172;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(Fluent6502.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fluent6502.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Fluent6502.STRING, 0); }
		public Dir_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_assert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_assertContext dir_assert() {
		Dir_assertContext _localctx = new Dir_assertContext(Context, State);
		EnterRule(_localctx, 28, RULE_dir_assert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(ASSERT);
			State = 175;
			expr(0);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 176;
				Match(COMMA);
				State = 177;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_bankContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANK() { return GetToken(Fluent6502.BANK, 0); }
		public Dir_bankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_bank; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_bank(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_bankContext dir_bank() {
		Dir_bankContext _localctx = new Dir_bankContext(Context, State);
		EnterRule(_localctx, 30, RULE_dir_bank);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(BANK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_bytesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(Fluent6502.BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fluent6502.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fluent6502.COMMA, i);
		}
		public Dir_bytesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_bytes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_bytes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_bytesContext dir_bytes() {
		Dir_bytesContext _localctx = new Dir_bytesContext(Context, State);
		EnterRule(_localctx, 32, RULE_dir_bytes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(BYTES);
			State = 183;
			expr(0);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 184;
				Match(COMMA);
				State = 185;
				expr(0);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_bankbytContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANKBYTES() { return GetToken(Fluent6502.BANKBYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fluent6502.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fluent6502.COMMA, i);
		}
		public Dir_bankbytContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_bankbyt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_bankbyt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_bankbytContext dir_bankbyt() {
		Dir_bankbytContext _localctx = new Dir_bankbytContext(Context, State);
		EnterRule(_localctx, 34, RULE_dir_bankbyt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(BANKBYTES);
			State = 192;
			expr(0);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 193;
				Match(COMMA);
				State = 194;
				expr(0);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fluent6502.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fluent6502.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Fluent6502.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Fluent6502.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(Fluent6502.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Fluent6502.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLM() { return GetToken(Fluent6502.EXCLM, 0); }
		public Op_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_unaryContext op_unary() {
		Op_unaryContext _localctx = new Op_unaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_op_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fluent6502.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fluent6502.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fluent6502.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(Fluent6502.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(Fluent6502.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(Fluent6502.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHFT() { return GetToken(Fluent6502.LSHFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHFT() { return GetToken(Fluent6502.RSHFT, 0); }
		public Op_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_binary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_binaryContext op_binary() {
		Op_binaryContext _localctx = new Op_binaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_op_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8067L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_gotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(Fluent6502.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(Fluent6502.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(Fluent6502.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(Fluent6502.MINUS, i);
		}
		public Op_gotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_goto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_goto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_gotoContext op_goto() {
		Op_gotoContext _localctx = new Op_gotoContext(Context, State);
		EnterRule(_localctx, 40, RULE_op_goto);
		try {
			int _alt;
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 204;
						Match(PLUS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 207;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 209;
						Match(MINUS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 212;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_impContext op_imp() {
			return GetRuleContext<Op_impContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_accContext op_acc() {
			return GetRuleContext<Op_accContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_immContext op_imm() {
			return GetRuleContext<Op_immContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_relContext op_rel() {
			return GetRuleContext<Op_relContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_zabContext op_zab() {
			return GetRuleContext<Op_zabContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_zaxContext op_zax() {
			return GetRuleContext<Op_zaxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_zayContext op_zay() {
			return GetRuleContext<Op_zayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_indContext op_ind() {
			return GetRuleContext<Op_indContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_inxContext op_inx() {
			return GetRuleContext<Op_inxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_inyContext op_iny() {
			return GetRuleContext<Op_inyContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 42, RULE_operation);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				op_imp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				op_acc();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				op_imm();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 219;
				op_rel();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 220;
				op_zab();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 221;
				op_zax();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 222;
				op_zay();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 223;
				op_ind();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 224;
				op_inx();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 225;
				op_iny();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_impContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_impliedContext opcode_implied() {
			return GetRuleContext<Opcode_impliedContext>(0);
		}
		public Op_impContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_imp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_imp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_impContext op_imp() {
		Op_impContext _localctx = new Op_impContext(Context, State);
		EnterRule(_localctx, 44, RULE_op_imp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			opcode_implied();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_accContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_accumlatorContext opcode_accumlator() {
			return GetRuleContext<Opcode_accumlatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(Fluent6502.A, 0); }
		public Op_accContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_acc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_acc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_accContext op_acc() {
		Op_accContext _localctx = new Op_accContext(Context, State);
		EnterRule(_localctx, 46, RULE_op_acc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			opcode_accumlator();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 231;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_immContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_immediateContext opcode_immediate() {
			return GetRuleContext<Opcode_immediateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(Fluent6502.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_immContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_imm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_imm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_immContext op_imm() {
		Op_immContext _localctx = new Op_immContext(Context, State);
		EnterRule(_localctx, 48, RULE_op_imm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			opcode_immediate();
			State = 235;
			Match(POUND);
			State = 236;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_relContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_relativeContext opcode_relative() {
			return GetRuleContext<Opcode_relativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_relContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_rel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_rel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_relContext op_rel() {
		Op_relContext _localctx = new Op_relContext(Context, State);
		EnterRule(_localctx, 50, RULE_op_rel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			opcode_relative();
			State = 239;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_zabContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_zp_absContext opcode_zp_abs() {
			return GetRuleContext<Opcode_zp_absContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_zabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_zab; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_zab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_zabContext op_zab() {
		Op_zabContext _localctx = new Op_zabContext(Context, State);
		EnterRule(_localctx, 52, RULE_op_zab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			opcode_zp_abs();
			State = 242;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_zaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_zp_abs_xContext opcode_zp_abs_x() {
			return GetRuleContext<Opcode_zp_abs_xContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fluent6502.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X() { return GetToken(Fluent6502.X, 0); }
		public Op_zaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_zax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_zax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_zaxContext op_zax() {
		Op_zaxContext _localctx = new Op_zaxContext(Context, State);
		EnterRule(_localctx, 54, RULE_op_zax);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			opcode_zp_abs_x();
			State = 245;
			expr(0);
			State = 246;
			Match(COMMA);
			State = 247;
			Match(X);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_zayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_zp_abs_yContext opcode_zp_abs_y() {
			return GetRuleContext<Opcode_zp_abs_yContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fluent6502.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y() { return GetToken(Fluent6502.Y, 0); }
		public Op_zayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_zay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_zay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_zayContext op_zay() {
		Op_zayContext _localctx = new Op_zayContext(Context, State);
		EnterRule(_localctx, 56, RULE_op_zay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			opcode_zp_abs_y();
			State = 250;
			expr(0);
			State = 251;
			Match(COMMA);
			State = 252;
			Match(Y);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_indContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_indirectContext opcode_indirect() {
			return GetRuleContext<Opcode_indirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fluent6502.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fluent6502.RPAREN, 0); }
		public Op_indContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_ind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_ind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_indContext op_ind() {
		Op_indContext _localctx = new Op_indContext(Context, State);
		EnterRule(_localctx, 58, RULE_op_ind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			opcode_indirect();
			State = 255;
			Match(LPAREN);
			State = 256;
			expr(0);
			State = 257;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_inxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_indirect_xContext opcode_indirect_x() {
			return GetRuleContext<Opcode_indirect_xContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fluent6502.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fluent6502.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X() { return GetToken(Fluent6502.X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fluent6502.RPAREN, 0); }
		public Op_inxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_inx; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_inx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_inxContext op_inx() {
		Op_inxContext _localctx = new Op_inxContext(Context, State);
		EnterRule(_localctx, 60, RULE_op_inx);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			opcode_indirect_x();
			State = 260;
			Match(LPAREN);
			State = 261;
			expr(0);
			State = 262;
			Match(COMMA);
			State = 263;
			Match(X);
			State = 264;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_inyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opcode_indirect_yContext opcode_indirect_y() {
			return GetRuleContext<Opcode_indirect_yContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fluent6502.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fluent6502.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fluent6502.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y() { return GetToken(Fluent6502.Y, 0); }
		public Op_inyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_iny; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_iny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_inyContext op_iny() {
		Op_inyContext _localctx = new Op_inyContext(Context, State);
		EnterRule(_localctx, 62, RULE_op_iny);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			opcode_indirect_y();
			State = 267;
			Match(LPAREN);
			State = 268;
			expr(0);
			State = 269;
			Match(RPAREN);
			State = 270;
			Match(COMMA);
			State = 271;
			Match(Y);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_impliedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK() { return GetToken(Fluent6502.BRK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC() { return GetToken(Fluent6502.CLC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD() { return GetToken(Fluent6502.CLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI() { return GetToken(Fluent6502.CLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV() { return GetToken(Fluent6502.CLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX() { return GetToken(Fluent6502.DEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY() { return GetToken(Fluent6502.DEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX() { return GetToken(Fluent6502.INX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY() { return GetToken(Fluent6502.INY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP() { return GetToken(Fluent6502.NOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA() { return GetToken(Fluent6502.PHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP() { return GetToken(Fluent6502.PHP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA() { return GetToken(Fluent6502.PLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP() { return GetToken(Fluent6502.PLP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI() { return GetToken(Fluent6502.RTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS() { return GetToken(Fluent6502.RTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC() { return GetToken(Fluent6502.SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED() { return GetToken(Fluent6502.SED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI() { return GetToken(Fluent6502.SEI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX() { return GetToken(Fluent6502.TAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY() { return GetToken(Fluent6502.TAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX() { return GetToken(Fluent6502.TSX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA() { return GetToken(Fluent6502.TXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS() { return GetToken(Fluent6502.TXS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA() { return GetToken(Fluent6502.TYA, 0); }
		public Opcode_impliedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_implied; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_implied(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_impliedContext opcode_implied() {
		Opcode_impliedContext _localctx = new Opcode_impliedContext(Context, State);
		EnterRule(_localctx, 64, RULE_opcode_implied);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2273982739080052736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_accumlatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(Fluent6502.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(Fluent6502.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(Fluent6502.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(Fluent6502.ROR, 0); }
		public Opcode_accumlatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_accumlator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_accumlator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_accumlatorContext opcode_accumlator() {
		Opcode_accumlatorContext _localctx = new Opcode_accumlatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_opcode_accumlator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 52913997086784L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_immediateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX() { return GetToken(Fluent6502.CPX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY() { return GetToken(Fluent6502.CPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(Fluent6502.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(Fluent6502.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		public Opcode_immediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_immediate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_immediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_immediateContext opcode_immediate() {
		Opcode_immediateContext _localctx = new Opcode_immediateContext(Context, State);
		EnterRule(_localctx, 68, RULE_opcode_immediate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 282145289404464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_relativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC() { return GetToken(Fluent6502.BCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS() { return GetToken(Fluent6502.BCS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ() { return GetToken(Fluent6502.BEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI() { return GetToken(Fluent6502.BMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE() { return GetToken(Fluent6502.BNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL() { return GetToken(Fluent6502.BPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC() { return GetToken(Fluent6502.BVC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS() { return GetToken(Fluent6502.BVS, 0); }
		public Opcode_relativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_relative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_relative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_relativeContext opcode_relative() {
		Opcode_relativeContext _localctx = new Opcode_relativeContext(Context, State);
		EnterRule(_localctx, 70, RULE_opcode_relative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 211840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_zp_absContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(Fluent6502.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(Fluent6502.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX() { return GetToken(Fluent6502.CPX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY() { return GetToken(Fluent6502.CPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Fluent6502.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Fluent6502.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(Fluent6502.JMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR() { return GetToken(Fluent6502.JSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(Fluent6502.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(Fluent6502.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(Fluent6502.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(Fluent6502.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(Fluent6502.ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(Fluent6502.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX() { return GetToken(Fluent6502.STX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY() { return GetToken(Fluent6502.STY, 0); }
		public Opcode_zp_absContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_zp_abs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_zp_abs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_zp_absContext opcode_zp_abs() {
		Opcode_zp_absContext _localctx = new Opcode_zp_absContext(Context, State);
		EnterRule(_localctx, 72, RULE_opcode_zp_abs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31860270133412976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_zp_abs_xContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(Fluent6502.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Fluent6502.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Fluent6502.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(Fluent6502.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(Fluent6502.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(Fluent6502.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(Fluent6502.ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(Fluent6502.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY() { return GetToken(Fluent6502.STY, 0); }
		public Opcode_zp_abs_xContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_zp_abs_x; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_zp_abs_x(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_zp_abs_xContext opcode_zp_abs_x() {
		Opcode_zp_abs_xContext _localctx = new Opcode_zp_abs_xContext(Context, State);
		EnterRule(_localctx, 74, RULE_opcode_zp_abs_x);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 22852989249126512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_zp_abs_yContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(Fluent6502.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(Fluent6502.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX() { return GetToken(Fluent6502.STX, 0); }
		public Opcode_zp_abs_yContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_zp_abs_y; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_zp_abs_y(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_zp_abs_yContext opcode_zp_abs_y() {
		Opcode_zp_abs_yContext _localctx = new Opcode_zp_abs_yContext(Context, State);
		EnterRule(_localctx, 76, RULE_opcode_zp_abs_y);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 13792909786611760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_indirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(Fluent6502.JMP, 0); }
		public Opcode_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_indirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_indirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_indirectContext opcode_indirect() {
		Opcode_indirectContext _localctx = new Opcode_indirectContext(Context, State);
		EnterRule(_localctx, 78, RULE_opcode_indirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(JMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_indirect_xContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(Fluent6502.STA, 0); }
		public Opcode_indirect_xContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_indirect_x; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_indirect_x(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_indirect_xContext opcode_indirect_x() {
		Opcode_indirect_xContext _localctx = new Opcode_indirect_xContext(Context, State);
		EnterRule(_localctx, 80, RULE_opcode_indirect_x);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4785641812394032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opcode_indirect_yContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(Fluent6502.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Fluent6502.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(Fluent6502.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fluent6502.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(Fluent6502.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(Fluent6502.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(Fluent6502.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(Fluent6502.STA, 0); }
		public Opcode_indirect_yContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode_indirect_y; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluent6502Visitor<TResult> typedVisitor = visitor as IFluent6502Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode_indirect_y(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opcode_indirect_yContext opcode_indirect_y() {
		Opcode_indirect_yContext _localctx = new Opcode_indirect_yContext(Context, State);
		EnterRule(_localctx, 82, RULE_opcode_indirect_y);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4785641812394032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,115,294,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,4,0,86,
		8,0,11,0,12,0,87,1,0,1,0,1,1,1,1,1,1,1,1,3,1,96,8,1,1,2,3,2,99,8,2,1,2,
		1,2,3,2,103,8,2,1,3,1,3,1,4,3,4,108,8,4,1,4,1,4,1,4,3,4,113,8,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,127,8,5,1,5,1,5,1,5,1,5,
		5,5,133,8,5,10,5,12,5,136,9,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,3,9,145,8,9,
		1,9,1,9,3,9,149,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,158,8,10,1,
		11,1,11,1,11,1,11,5,11,164,8,11,10,11,12,11,167,9,11,1,12,1,12,1,12,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,179,8,14,1,15,1,15,1,16,1,16,1,16,
		1,16,5,16,187,8,16,10,16,12,16,190,9,16,1,17,1,17,1,17,1,17,5,17,196,8,
		17,10,17,12,17,199,9,17,1,18,1,18,1,19,1,19,1,20,4,20,206,8,20,11,20,12,
		20,207,1,20,4,20,211,8,20,11,20,12,20,212,3,20,215,8,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,227,8,21,1,22,1,22,1,23,1,23,3,
		23,233,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
		1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
		1,39,1,40,1,40,1,41,1,41,1,41,0,1,10,42,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,0,12,1,0,113,114,1,0,110,112,1,0,66,72,2,0,66,67,73,
		78,9,0,15,15,18,21,26,27,30,31,38,38,40,43,46,47,49,51,55,60,3,0,6,6,37,
		37,44,45,6,0,4,5,22,24,28,28,34,36,39,39,48,48,3,0,7,9,11,13,16,17,9,0,
		4,6,10,10,22,25,28,29,32,37,39,39,44,45,48,48,52,54,11,0,4,6,22,22,25,
		25,28,29,34,35,37,37,39,39,44,45,48,48,52,52,54,54,8,0,4,5,22,22,28,28,
		34,34,36,36,39,39,48,48,52,53,7,0,4,5,22,22,28,28,34,34,39,39,48,48,52,
		52,290,0,85,1,0,0,0,2,95,1,0,0,0,4,98,1,0,0,0,6,104,1,0,0,0,8,112,1,0,
		0,0,10,126,1,0,0,0,12,137,1,0,0,0,14,139,1,0,0,0,16,141,1,0,0,0,18,148,
		1,0,0,0,20,157,1,0,0,0,22,159,1,0,0,0,24,168,1,0,0,0,26,171,1,0,0,0,28,
		174,1,0,0,0,30,180,1,0,0,0,32,182,1,0,0,0,34,191,1,0,0,0,36,200,1,0,0,
		0,38,202,1,0,0,0,40,214,1,0,0,0,42,226,1,0,0,0,44,228,1,0,0,0,46,230,1,
		0,0,0,48,234,1,0,0,0,50,238,1,0,0,0,52,241,1,0,0,0,54,244,1,0,0,0,56,249,
		1,0,0,0,58,254,1,0,0,0,60,259,1,0,0,0,62,266,1,0,0,0,64,273,1,0,0,0,66,
		275,1,0,0,0,68,277,1,0,0,0,70,279,1,0,0,0,72,281,1,0,0,0,74,283,1,0,0,
		0,76,285,1,0,0,0,78,287,1,0,0,0,80,289,1,0,0,0,82,291,1,0,0,0,84,86,3,
		2,1,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,
		0,0,0,89,90,5,0,0,1,90,1,1,0,0,0,91,96,3,6,3,0,92,96,3,4,2,0,93,96,3,20,
		10,0,94,96,3,8,4,0,95,91,1,0,0,0,95,92,1,0,0,0,95,93,1,0,0,0,95,94,1,0,
		0,0,96,3,1,0,0,0,97,99,3,8,4,0,98,97,1,0,0,0,98,99,1,0,0,0,99,100,1,0,
		0,0,100,102,3,42,21,0,101,103,3,6,3,0,102,101,1,0,0,0,102,103,1,0,0,0,
		103,5,1,0,0,0,104,105,7,0,0,0,105,7,1,0,0,0,106,108,5,79,0,0,107,106,1,
		0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,109,0,0,110,113,5,62,0,
		0,111,113,3,40,20,0,112,107,1,0,0,0,112,111,1,0,0,0,113,9,1,0,0,0,114,
		115,6,5,-1,0,115,127,3,12,6,0,116,127,3,14,7,0,117,127,3,16,8,0,118,127,
		3,18,9,0,119,120,3,36,18,0,120,121,3,10,5,3,121,127,1,0,0,0,122,123,5,
		64,0,0,123,124,3,10,5,0,124,125,5,65,0,0,125,127,1,0,0,0,126,114,1,0,0,
		0,126,116,1,0,0,0,126,117,1,0,0,0,126,118,1,0,0,0,126,119,1,0,0,0,126,
		122,1,0,0,0,127,134,1,0,0,0,128,129,10,2,0,0,129,130,3,38,19,0,130,131,
		3,10,5,3,131,133,1,0,0,0,132,128,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,
		0,134,135,1,0,0,0,135,11,1,0,0,0,136,134,1,0,0,0,137,138,7,1,0,0,138,13,
		1,0,0,0,139,140,5,73,0,0,140,15,1,0,0,0,141,142,5,108,0,0,142,17,1,0,0,
		0,143,145,5,79,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,
		149,5,109,0,0,147,149,3,40,20,0,148,144,1,0,0,0,148,147,1,0,0,0,149,19,
		1,0,0,0,150,158,3,22,11,0,151,158,3,24,12,0,152,158,3,26,13,0,153,158,
		3,28,14,0,154,158,3,30,15,0,155,158,3,32,16,0,156,158,3,34,17,0,157,150,
		1,0,0,0,157,151,1,0,0,0,157,152,1,0,0,0,157,153,1,0,0,0,157,154,1,0,0,
		0,157,155,1,0,0,0,157,156,1,0,0,0,158,21,1,0,0,0,159,160,5,80,0,0,160,
		165,3,10,5,0,161,162,5,63,0,0,162,164,3,10,5,0,163,161,1,0,0,0,164,167,
		1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,23,1,0,0,0,167,165,1,0,0,0,
		168,169,5,81,0,0,169,170,3,10,5,0,170,25,1,0,0,0,171,172,5,82,0,0,172,
		173,5,107,0,0,173,27,1,0,0,0,174,175,5,83,0,0,175,178,3,10,5,0,176,177,
		5,63,0,0,177,179,5,107,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,29,1,0,
		0,0,180,181,5,84,0,0,181,31,1,0,0,0,182,183,5,86,0,0,183,188,3,10,5,0,
		184,185,5,63,0,0,185,187,3,10,5,0,186,184,1,0,0,0,187,190,1,0,0,0,188,
		186,1,0,0,0,188,189,1,0,0,0,189,33,1,0,0,0,190,188,1,0,0,0,191,192,5,85,
		0,0,192,197,3,10,5,0,193,194,5,63,0,0,194,196,3,10,5,0,195,193,1,0,0,0,
		196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,35,1,0,0,0,199,197,
		1,0,0,0,200,201,7,2,0,0,201,37,1,0,0,0,202,203,7,3,0,0,203,39,1,0,0,0,
		204,206,5,66,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,
		1,0,0,0,208,215,1,0,0,0,209,211,5,67,0,0,210,209,1,0,0,0,211,212,1,0,0,
		0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,205,1,0,0,0,214,
		210,1,0,0,0,215,41,1,0,0,0,216,227,3,44,22,0,217,227,3,46,23,0,218,227,
		3,48,24,0,219,227,3,50,25,0,220,227,3,52,26,0,221,227,3,54,27,0,222,227,
		3,56,28,0,223,227,3,58,29,0,224,227,3,60,30,0,225,227,3,62,31,0,226,216,
		1,0,0,0,226,217,1,0,0,0,226,218,1,0,0,0,226,219,1,0,0,0,226,220,1,0,0,
		0,226,221,1,0,0,0,226,222,1,0,0,0,226,223,1,0,0,0,226,224,1,0,0,0,226,
		225,1,0,0,0,227,43,1,0,0,0,228,229,3,64,32,0,229,45,1,0,0,0,230,232,3,
		66,33,0,231,233,5,1,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,47,1,0,0,0,
		234,235,3,68,34,0,235,236,5,61,0,0,236,237,3,10,5,0,237,49,1,0,0,0,238,
		239,3,70,35,0,239,240,3,10,5,0,240,51,1,0,0,0,241,242,3,72,36,0,242,243,
		3,10,5,0,243,53,1,0,0,0,244,245,3,74,37,0,245,246,3,10,5,0,246,247,5,63,
		0,0,247,248,5,2,0,0,248,55,1,0,0,0,249,250,3,76,38,0,250,251,3,10,5,0,
		251,252,5,63,0,0,252,253,5,3,0,0,253,57,1,0,0,0,254,255,3,78,39,0,255,
		256,5,64,0,0,256,257,3,10,5,0,257,258,5,65,0,0,258,59,1,0,0,0,259,260,
		3,80,40,0,260,261,5,64,0,0,261,262,3,10,5,0,262,263,5,63,0,0,263,264,5,
		2,0,0,264,265,5,65,0,0,265,61,1,0,0,0,266,267,3,82,41,0,267,268,5,64,0,
		0,268,269,3,10,5,0,269,270,5,65,0,0,270,271,5,63,0,0,271,272,5,3,0,0,272,
		63,1,0,0,0,273,274,7,4,0,0,274,65,1,0,0,0,275,276,7,5,0,0,276,67,1,0,0,
		0,277,278,7,6,0,0,278,69,1,0,0,0,279,280,7,7,0,0,280,71,1,0,0,0,281,282,
		7,8,0,0,282,73,1,0,0,0,283,284,7,9,0,0,284,75,1,0,0,0,285,286,7,10,0,0,
		286,77,1,0,0,0,287,288,5,32,0,0,288,79,1,0,0,0,289,290,7,11,0,0,290,81,
		1,0,0,0,291,292,7,11,0,0,292,83,1,0,0,0,20,87,95,98,102,107,112,126,134,
		144,148,157,165,178,188,197,207,212,214,226,232
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
